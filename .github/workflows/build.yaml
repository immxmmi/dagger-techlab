name: Build Training

on:
  pull_request:

#env:
#  REGISTRY: 'ghcr.io'
#  REGISTRY_PATH: '${{ github.repository }}'
#  IMAGE_NAME: 'training-spa'

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      -
        name: Set up npm for linting
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
      -
        name: Lint Markdown
        run: npm ci && npm run mdlint
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      #- 
        # Extract metadata (tags, labels) for Docker https://github.com/docker/metadata-action
        #name: Extract Docker metadata
        #id: meta
        #uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        #with:
        #  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - 
        # Build and push Docker image with Buildx https://github.com/docker/build-push-action
        name: Build and push Docker pr image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          #tags: ${{ steps.meta.outputs.tags }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      -
        name: 'Install Helm'
        uses: azure/setup-helm@v4
        with:
          version: 'latest'
      -
        name: Install Kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'
      -
        name: Create KUBECONFIG
        env:
          KUBE_CONFIG: '${{ secrets.KUBECONFIG_TEST_AV2 }}'
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG" > $HOME/.kube/config
      -
        name: Deploy Helm Release
        env:
          TRAINING_HELM_RELEASE: 'pr-${{ github.event.pull_request.number }}'
          TRAINING_NAMESPACE: 'pitc-cicd-dagger-techlab-test'
          TRAINING_VERSION: '${{ github.sha }}'
        run: |
          helm upgrade $TRAINING_HELM_RELEASE acend-training-chart --install --wait \
            --kubeconfig $HOME/.kube/config \
            --namespace=$TRAINING_NAMESPACE \
            --set=app.name=$HELM_RELEASE \
            --set=app.version=$TRAINING_VERSION \
            --repo=https://acend.github.io/helm-charts/ \
            --values=helm-chart/values.yaml \
            --atomic
      -
        name: Redeploy Deployments
        env:
          TRAINING_HELM_RELEASE: 'pr-${{ github.event.pull_request.number }}'
          TRAINING_HELM_NAME: 'dagger-techlab-puzzle'
          TRAINING_NAMESPACE: 'pitc-cicd-dagger-techlab-test'
        run: |
          kubectl rollout restart deployment/${TRAINING_HELM_RELEASE}-${TRAINING_HELM_NAME} \
            --kubeconfig $HOME/.kube/config \
            --namespace $TRAINING_NAMESPACE
      -
        name: Comment PR Environments in PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          message: |
           PR Environments:
           * puzzle version <https://dagger-techlab-pr-${{ github.event.pull_request.number }}.ocp.cloudscale.puzzle.ch>
